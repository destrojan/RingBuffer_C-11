В папке src находится код программы, которая может открыть изображение в формате jpg или ppm p6 binary, сделать гистограммную эквализацию(https://en.wikipedia.org/wiki/Histogram_equalization), сохранить результат в формате ppm p6 binary, а также сравнить различия между двумя фотографиями сохраненных в формате ppm p6 binary.

Пример работы программы:

Открыть изображение, наложить эффект, сохранить результат
> sklm_test input.jpg output.ppm

Открыть изображение, наложить эффект, сохранить результат и сравнить с референсом
> sklm_test input.jpg output.ppm reference.ppm

Задание заключается в том, чтобы максимально улучшить текущий код в плане производительности. Можно использовать все, что есть в стандартной библиотеке С++14, многопоточность, а также SIMD инструкции вплоть до версии AVX. Результат должен быть максимально идентичным базовому. Допускается отличие не более полу процента по-пиксельно на один канал. Что нужно оптимизировать? Открытие (исключая работу внешней библиотеки), обработку (самая важная часть), сохранение.

Идеально, если изменения в коде будут сопровождаться комментариями почему было сделано так или вот так.

Код проверялся на macOS, но должен работать на любых системах и компиляторах, которые поддерживают С++14. Крайне желательно сохранить его кросс-платформенность. Интерфейсы должны меняться минимально (лучше и вовсе не меняться). Алгоритм самой эквализиции должен сохраниться.

Код написан максимально просто и нарочито медленным. Множество проверок для простоты были опущены. Упрощения кода накладывают ограничения поэтому, например, поддерживается только baseline jpeg, как входной параметр. Проверяться задание будет на input.jpg идущем в комплекте.

И бонус, в коде могут содержаться ошибки! Можно не стесняться и исправлять их :) Некоторые ошибки могут приводить к крэшу на некоторых системах/компиляторах. Это часть задания.

Оценка задания в большей части будет складываться из эффективности кода. Код должен быть максимально быстрым, однако, при этом не должна страдать корректность программы, а так же, что естественно, нужно стараться писать понятный себе и любому другому человеку код.

Ожидается, что присланный код должен точно выполнятся <150ms на компьютере кандидата. В противном случае, решение точно будет неудовлетворительным. Значение 150ms – это своего рода ориентир, который недостижим даже на мощном десктопном железе, если не сделать большинство очевидных оптимизаций.
